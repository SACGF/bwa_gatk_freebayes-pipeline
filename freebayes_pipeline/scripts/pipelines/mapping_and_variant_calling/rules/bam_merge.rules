max_merge_bam_t = 8
merge_t = T_PER_SM if T_PER_SM <= max_merge_bam_t else max_merge_bam_t
merge_mem = 3000 + (merge_t -1) * 1000

rule bam_merge:
    """
    Merge bam files for multiple units into one for the given sample.
    If the sample has only one unit, a symlink will be created.
    inputs are the output of bwa mapping to mapped/
    """
    input:
        bams =lambda wildcards: expand(
                "bwa_out/{unit}.bam",
                unit=config["sample_to_units"][wildcards.sample]),
        idx =lambda wildcards: expand(
                "bwa_out/{unit}.bam.bai",
                unit=config["sample_to_units"][wildcards.sample])
    output:
            bam="mapped/{sample}.bam",
            idx="mapped/{sample}.bam.bai"
    threads: merge_t
    priority: 10
    resources: thread=merge_t, io=1
    params:
        job_name = BASE_NAME + "_mergeBam_" + "{sample}",
        t = str(merge_t),
        mem = str(merge_mem),
        vmem = str(merge_mem * 2),
        walltime = WALLTIME,
    run:
        if len(input.bams) > 1:
            shell("{SAMBAMBA} merge -t {threads} {output.bam} {input.bams} ")
        else:
            shell("sleep 3 && "
                    "ln -sf ../{input.bams} {output.bam} && "
                    "ln -sf ../{input.idx} {output.idx} ")
